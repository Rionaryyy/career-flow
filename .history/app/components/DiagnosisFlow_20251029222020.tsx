"use client";

import { useState, useEffect } from "react";
import Header from "./layouts/Header";
import Phase1 from "./Phase1/Phase1";
import Phase2 from "./Phase2/Phase2";
import Result from "./Result";
import FeatureHighlightsFlow from "./FeatureHighlightsFlow";
import HeroMini from "./HeroMini";
import { Phase1Answers, Phase2Answers, DiagnosisAnswers } from "@/types/types";
import { filterPlansByPhase1 } from "@/utils/filters/phase1FilterLogic";
import { allPlans } from "@/data/plans";
import { Plan } from "@/types/planTypes"; // ‚úÖ Âûã„ÇíÊòéÁ§∫

// üü¶ ÂàùÊúüÂÄ§
const INITIAL_ANSWERS: DiagnosisAnswers = {
  phase1: {
    includePoints: null,
    networkQuality: null,
    carrierType: null,
    supportPreference: null,
    contractLockPreference: null,
    considerCardAndPayment: null,
  },
  phase2: {
    dataUsage: null,
    speedLimitImportance: null,
    tetheringNeeded: null,
    tetheringUsage: null,

    callDuration: "",
    callFrequencyPerWeek: "",
    familyCallRatio: "",
    overseasCallDuration: "",
    overseasCallFrequencyPerWeek: "",
    callOptionsNeeded: "",

    familyLines: null,
    setDiscount: null,
    infraSet: null,

    shoppingList: null,
    shoppingMonthly: null,
    paymentList: null,
    paymentMonthly: null,

    videoSubscriptions: null,
    musicSubscriptions: null,
    bookSubscriptions: null,
    gameSubscriptions: null,
    cloudSubscriptions: null,
    otherSubscriptions: null,
    subscriptionMonthly: null,

    buyingDevice: null,
    devicePurchaseMethods: [],
    devicePreference: null,
    oldDevicePlan: null,

    overseasUse: null,
    overseasPreference: null,
    dualSim: null,
    specialUses: [],

    mainCard: [], // ‚Üê ‚úÖ ‰øÆÊ≠£„Åì„Åì
    paymentTiming: null,
  },
};

export default function DiagnosisFlow() {
  const [step, setStep] = useState<"phase1" | "phase2" | "result">("phase1");
  const [answers, setAnswers] = useState<DiagnosisAnswers>(INITIAL_ANSWERS);

  // ‚úÖ Plan Âûã„ÅßÁÆ°ÁêÜÔºàanyÁ¶ÅÊ≠¢Ôºâ
  const [filteredPlans, setFilteredPlans] = useState<Plan[]>([]);

  // ‚úÖ ‰øùÂ≠ò„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
  useEffect(() => {
    const saved = localStorage.getItem("diagnosisAnswers");
    if (saved) {
      try {
        const parsed = JSON.parse(saved) as DiagnosisAnswers; // ‚úÖ ÂûãÊåáÂÆö
        setAnswers(parsed);
        console.log("üíæ ‰øùÂ≠ò„Åï„Çå„ÅüÂõûÁ≠î„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü");
      } catch (e) {
        console.error("‰øùÂ≠ò„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü", e);
      }
    }
  }, []);

  // ‚úÖ ÂõûÁ≠î„ÅåÂ§â„Çè„Çã„Åü„Å≥„Å´‰øùÂ≠ò
  useEffect(() => {
    localStorage.setItem("diagnosisAnswers", JSON.stringify(answers));
  }, [answers]);

  // ‚úÖ „Éï„Çß„Éº„Ç∫1ÈÄÅ‰ø°
  const handlePhase1Submit = (phase1Answers: Phase1Answers) => {
    setAnswers((prev) => {
      const updated: DiagnosisAnswers = { ...prev, phase1: phase1Answers };
      return JSON.parse(JSON.stringify(updated)) as DiagnosisAnswers; // ‚úÖ Âûã„Çí‰øùÊåÅ
    });

    const phase1Results = filterPlansByPhase1(phase1Answers, allPlans);
    console.log("üìä „Éï„Ç£„É´„Çø„ÉºÁµêÊûú:", phase1Results);

    setFilteredPlans(phase1Results);
    setStep("phase2");
    window.scrollTo({ top: 0, behavior: "auto" });
  };

  // ‚úÖ „Éï„Çß„Éº„Ç∫2ÈÄÅ‰ø°ÔºàJSONÂ±ïÈñãÔºãÈÉ®ÂàÜÊõ¥Êñ∞Ôºâ
  const handlePhase2Submit = (phase2Answers: Phase2Answers) => {
    console.log("üì® Phase2 Submit Data:", JSON.stringify(phase2Answers, null, 2)); // ‚Üê Â±ïÈñã„Åó„Å¶Ë°®Á§∫

    setAnswers((prev) => {
      const updated: DiagnosisAnswers = {
        ...prev,
        phase2: {
          ...prev.phase2,   // ‚Üê Êó¢Â≠òÂÄ§„Çí‰øùÊåÅ
          ...phase2Answers, // ‚Üê ‰ªäÂõû„ÅÆÂõûÁ≠î„Çí‰∏äÊõ∏„Åç
        },
      };

      console.log("üíæ DiagnosisAnswers Êõ¥Êñ∞Âæå:", JSON.stringify(updated.phase2, null, 2)); // ‚Üê Á¢∫Ë™çÁî®„É≠„Ç∞

      // „É≠„Éº„Ç´„É´‰øùÂ≠ò„ÇÇÂêåÊôÇ„Å´Êõ¥Êñ∞
      localStorage.setItem("diagnosisAnswers", JSON.stringify(updated));

      return JSON.parse(JSON.stringify(updated)) as DiagnosisAnswers;
    });

    setStep("result");
    window.scrollTo({ top: 0, behavior: "auto" });
  };

  // ‚úÖ „É™„Çª„ÉÉ„Éà
  const resetAnswers = () => {
    localStorage.removeItem("diagnosisAnswers");
    setAnswers(JSON.parse(JSON.stringify(INITIAL_ANSWERS)) as DiagnosisAnswers);
    setFilteredPlans([]);
    setStep("phase1");
  };

  return (
    <div className="min-h-screen bg-white text-black w-full">
      <Header />
      <main className="w-full pt-16 space-y-8">
        <HeroMini />

        {step === "phase1" && (
          <Phase1 defaultValues={answers.phase1} onSubmit={handlePhase1Submit} />
        )}

        {step === "phase2" && (
          <Phase2
            defaultValues={answers.phase2}
            phase1Answers={answers.phase1}
            onSubmit={handlePhase2Submit}
            onBack={() => setStep("phase1")}
          />
        )}

        {step === "result" && (
          <Result
            answers={answers}
            filteredPlans={filteredPlans}
            onRestart={resetAnswers}
          />
        )}

        <FeatureHighlightsFlow />
      </main>
    </div>
  );
}

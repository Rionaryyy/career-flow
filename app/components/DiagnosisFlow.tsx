"use client";

import { useState, useEffect } from "react";
import Header from "./layouts/Header";
import Phase1 from "./Phase1/Phase1";
import Phase2 from "./Phase2/Phase2";
import Result from "./Result";
import FeatureHighlightsFlow from "./FeatureHighlightsFlow";
import HeroMini from "./HeroMini";
import { Phase1Answers, Phase2Answers, DiagnosisAnswers } from "@/types/types";

// üü© „Éï„Ç£„É´„Çø„Éº„É≠„Ç∏„ÉÉ„ÇØ„Çí„Ç§„É≥„Éù„Éº„Éà
import { filterPlansByPhase1 } from "@/utils/filters/phase1FilterLogic";

// üü© ÂÖ®„Éó„É©„É≥„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà
import { allPlans } from "@/data/plans";

const INITIAL_ANSWERS: DiagnosisAnswers = {
  phase1: {
    includePoints: null,
    networkQuality: null,
    carrierType: null,
    supportPreference: null,
    contractLockPreference: null,
    considerCardAndPayment: null,
  },
  phase2: {
    dataUsage: null,
    speedLimitImportance: null,
    tetheringNeeded: null,
    tetheringUsage: null,

    callDuration: "",
    callFrequencyPerWeek: "",
    familyCallRatio: "",
    overseasCallDuration: "",
    overseasCallFrequencyPerWeek: "",
    callOptionsNeeded: "",

    familyLines: null,
    setDiscount: null,
    infraSet: null,

    shoppingList: null,
    shoppingMonthly: null,
    paymentList: null,
    paymentMonthly: null,

    videoSubscriptions: null,
    musicSubscriptions: null,
    bookSubscriptions: null,
    gameSubscriptions: null,
    cloudSubscriptions: null,
    otherSubscriptions: null,
    subscriptionMonthly: null,

    buyingDevice: null,
    devicePurchaseMethods: [],
    devicePreference: null,
    oldDevicePlan: null,

    overseasUse: null,
    overseasPreference: null,
    dualSim: null,
    specialUses: [],

    mainCard: null,
    paymentTiming: null,
  },
};

export default function DiagnosisFlow() {
  const [step, setStep] = useState<"phase1" | "phase2" | "result">("phase1");
  const [answers, setAnswers] = useState<DiagnosisAnswers>(INITIAL_ANSWERS);

  // üü© „Éï„Ç£„É´„Çø„ÉºÁµêÊûú„Çí‰øùÊåÅ„Åô„Çã state
  const [filteredPlans, setFilteredPlans] = useState<any[]>([]);

  // ‚úÖ ‰øùÂ≠òÊ∏à„Åø„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
  useEffect(() => {
    const saved = localStorage.getItem("diagnosisAnswers");
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setAnswers(parsed);
        console.log("üíæ ‰øùÂ≠ò„Åï„Çå„ÅüÂõûÁ≠î„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü");
      } catch (e) {
        console.error("‰øùÂ≠ò„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü", e);
      }
    }
  }, []);

  // ‚úÖ ÂõûÁ≠î„ÅåÊõ¥Êñ∞„Åï„Çå„Çã„Åü„Å≥„Å´„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å∏‰øùÂ≠ò
  useEffect(() => {
    localStorage.setItem("diagnosisAnswers", JSON.stringify(answers));
  }, [answers]);

  // ‚úÖ „Éï„Çß„Éº„Ç∫1ÂõûÁ≠îÈÄÅ‰ø°
  const handlePhase1Submit = (phase1Answers: Phase1Answers) => {
    setAnswers((prev) => ({ ...prev, phase1: phase1Answers }));

    // üü© „Éï„Ç£„É´„Çø„ÉºÂá¶ÁêÜ„ÇíÂÆüË°å
    const phase1Results = filterPlansByPhase1(phase1Answers, allPlans);

    console.log("üìä „Éï„Ç£„É´„Çø„ÉºÁµêÊûú:", phase1Results);

    // üü© ‰øùÂ≠ò
    setFilteredPlans(phase1Results);

    setStep("phase2");
    window.scrollTo({ top: 0, behavior: "auto" });
  };

  // ‚úÖ „Éï„Çß„Éº„Ç∫2ÂõûÁ≠îÈÄÅ‰ø°
  const handlePhase2Submit = (phase2Answers: Phase2Answers) => {
    setAnswers((prev) => ({ ...prev, phase2: phase2Answers }));
    setStep("result");
    window.scrollTo({ top: 0, behavior: "auto" });
  };

  // ‚úÖ ÂõûÁ≠î„É™„Çª„ÉÉ„ÉàÊ©üËÉΩ
  const resetAnswers = () => {
    localStorage.removeItem("diagnosisAnswers");
    setAnswers(INITIAL_ANSWERS);
    setStep("phase1");
  };

  return (
    <div className="min-h-screen bg-white text-black w-full">
      <Header />
      <main className="w-full pt-16 space-y-8">
        <HeroMini />

        {step === "phase1" && (
          <Phase1 defaultValues={answers.phase1} onSubmit={handlePhase1Submit} />
        )}

        {step === "phase2" && (
          <Phase2
            defaultValues={answers.phase2}
            phase1Answers={answers.phase1}
            onSubmit={handlePhase2Submit}
            onBack={() => setStep("phase1")}
          />
        )}

        {step === "result" && (
          <Result
            answers={answers}
            filteredPlans={filteredPlans} // üü© ‚Üê „Åì„Åì„ÇÇÂøò„Çå„Åö„Å´Ê∏°„Åô
            onRestart={resetAnswers}
          />
        )}

        <FeatureHighlightsFlow />
      </main>
    </div>
  );
}

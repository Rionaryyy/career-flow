"use client";

import QuestionCard from "../layouts/QuestionCard";
import { Phase2Answers } from "@/types/types";
import { AnimatePresence, motion } from "framer-motion";
import { suggestCallPlan } from "@/utils/logic/callPlanAdvisor";
import ReactMarkdown from "react-markdown";

interface Props {
  answers: Phase2Answers;
  onChange: (updated: Partial<Phase2Answers>) => void;
}

export default function Phase2Call({ answers, onChange }: Props) {
  const questions = [
    {
      id: "needCallPlan",
      question: "„Åã„ÅëÊîæÈ°å„Ç™„Éó„Ç∑„Éß„É≥„ÇíÂà©Áî®„Åó„Åü„ÅÑ„Åß„Åô„ÅãÔºü",
      options: [
        "„ÅØ„ÅÑÔºàÂà©Áî®„Åó„Åü„ÅÑÔºâ",
        "„ÅÑ„ÅÑ„ÅàÔºà‰Ωø„Å£„ÅüÂàÜ„Å†„ÅëÊîØÊâï„ÅÑ„Åü„ÅÑÔºâ",
        "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ",
      ],
      type: "radio" as const,
    },
    {
      id: "unknownCallUsageDuration",
      question: "1Âõû„ÅÇ„Åü„Çä„ÅÆÈÄöË©±ÊôÇÈñì„Å´ÊúÄ„ÇÇËøë„ÅÑ„ÇÇ„ÅÆ„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ",
      options: [
        "„Åª„Å®„Çì„Å©ÈÄöË©±„Åó„Å™„ÅÑÔºàLINE„Å™„Å©‰∏≠ÂøÉÔºâ",
        "5ÂàÜ‰ª•ÂÜÖÔºàÁü≠„ÅÑÁ¢∫Ë™ç„ÇÑ‰∫àÁ¥Ñ„Å™„Å©Ôºâ",
        "15ÂàÜ‰ª•ÂÜÖÔºàÂÆ∂Êóè„ÉªÂèã‰∫∫„Å®„ÅÆÈÄöË©±„ÅåÂ§ö„ÅÑÔºâ",
        "30ÂàÜ‰ª•ÂÜÖÔºà‰ªï‰∫ã„ÇÑÈï∑„ÇÅ„ÅÆ‰ºöË©±„ÅåÂ§ö„ÅÑÔºâ",
        "30ÂàÜ‰ª•‰∏äÔºàÈï∑ÊôÇÈñì„ÉªÊ•≠ÂãôÈÄöË©±„Å™„Å©Ôºâ",
      ],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        ans.needCallPlan === "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ",
    },
    {
      id: "unknownCallFrequency",
      question: "1ÈÄ±Èñì„ÅÇ„Åü„Çä„Å©„ÅÆ„Åè„Çâ„ÅÑÈÄöË©±„Åó„Åæ„Åô„ÅãÔºü",
      options: ["ÈÄ±1„Äú2ÂõûÁ®ãÂ∫¶", "ÈÄ±3„Äú4ÂõûÁ®ãÂ∫¶", "ÈÄ±5„Äú6ÂõûÁ®ãÂ∫¶", "„Åª„ÅºÊØéÊó•"],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        ans.needCallPlan === "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ" &&
        !!ans.unknownCallUsageDuration,
    },
    {
      id: "needCallPlanConfirm",
      question: "‰∏äË®ò„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÂèÇËÄÉ„Å´„ÄÅ„Åã„ÅëÊîæÈ°å„ÇíÂà©Áî®„Åó„Åü„ÅÑ„Åß„Åô„ÅãÔºü",
      options: ["„ÅØ„ÅÑÔºàÂà©Áî®„Åó„Åü„ÅÑÔºâ", "„ÅÑ„ÅÑ„ÅàÔºà‰Ωø„Å£„ÅüÂàÜ„Å†„ÅëÊîØÊâï„ÅÑ„Åü„ÅÑÔºâ"],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        ans.needCallPlan === "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ" &&
        !!ans.unknownCallUsageDuration &&
        !!ans.unknownCallFrequency,
    },
    {
      id: "callPlanType",
      question: "Ê§úË®é„Åó„Åü„ÅÑ„Åã„ÅëÊîæÈ°å„Çø„Ç§„Éó„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ",
      options: [
        "1Âõû„ÅÇ„Åü„Çä„ÅÆÈÄöË©±ÊôÇÈñì„Å´‰∏äÈôê„Åå„ÅÇ„Çã„Éó„É©„É≥Ôºà‰æãÔºö5ÂàÜ‰ª•ÂÜÖÁÑ°ÊñôÔºâ",
        "ÊúàÂÜÖ„ÅÆÂêàË®àÈÄöË©±ÊôÇÈñì„Å´‰∏äÈôê„Åå„ÅÇ„Çã„Éó„É©„É≥Ôºà‰æãÔºöÊúà60ÂàÜ„Åæ„ÅßÁÑ°ÊñôÔºâ",
        "Êúà„Å´Ê±∫„Åæ„Å£„ÅüÂõûÊï∞„Åæ„Åß‚óØÂàÜÈÄöË©±„Åß„Åç„Çã„Éó„É©„É≥Ôºà‰æãÔºöÊúà30Âõû„Åæ„ÅßÂêÑ10ÂàÜÁÑ°ÊñôÔºâ",
        "Áâπ„Å´„Åì„Å†„Çè„Çâ„Å™„ÅÑÔºà„Å©„Çå„Åß„ÇÇËâØ„ÅÑÔºâ",
      ],
      type: "checkbox" as const,
      condition: (ans: Phase2Answers) =>
        ans.needCallPlan === "„ÅØ„ÅÑÔºàÂà©Áî®„Åó„Åü„ÅÑÔºâ" ||
        ans.needCallPlanConfirm === "„ÅØ„ÅÑÔºàÂà©Áî®„Åó„Åü„ÅÑÔºâ",
    },
    {
      id: "timeLimitPreference",
      question:
        "Â∏åÊúõ„Åô„ÇãÊôÇÈñìÂà∂ÈôêÂûã„ÅÆ„Åã„ÅëÊîæÈ°åÁØÑÂõ≤„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºà‚ÄªÈÅ∏Êäû„Åó„ÅüÊôÇÈñì„Çà„ÇäÁü≠„ÅÑ„Éó„É©„É≥„ÅØÊØîËºÉÂØæË±°Â§ñ„Å´„Å™„Çä„Åæ„ÅôÔºâ",
      options: [
        "5ÂàÜ‰ª•ÂÜÖÔºàÁü≠ÊôÇÈñì„ÅÆÈÄöË©±„ÅåÂ§ö„ÅÑÔºâ",
        "10ÂàÜ‰ª•ÂÜÖÔºàËªΩ„ÇÅ„ÅÆÈÄöË©±„ÅåÂ§ö„ÅÑÔºâ",
        "15ÂàÜ‰ª•ÂÜÖÔºà‰∏≠Á®ãÂ∫¶„ÅÆÈÄöË©±„ÅåÂ§ö„ÅÑÔºâ",
        "30ÂàÜ‰ª•ÂÜÖÔºà„ÇÑ„ÇÑÈï∑„ÇÅ„ÅÆÈÄöË©±Ôºâ",
        "ÁÑ°Âà∂ÈôêÔºàÂà∂Èôê„Å™„Åè„Åã„ÅëÊîæÈ°åÔºâ",
      ],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        Array.isArray(ans.callPlanType) &&
        ans.callPlanType.some((t) => t.includes("1Âõû„ÅÇ„Åü„Çä")),
    },
    {
      id: "monthlyLimitPreference",
      question:
        "Â∏åÊúõ„Åô„ÇãÊúàÈñìÂà∂ÈôêÂûã„ÅÆÁØÑÂõ≤„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇÔºà‚ÄªÈÅ∏Êäû„Åó„Åü‰∏äÈôê„Çà„ÇäÂ∞ë„Å™„ÅÑÊôÇÈñì„ÅÆ„Éó„É©„É≥„ÅØÊØîËºÉÂØæË±°Â§ñ„Å´„Å™„Çä„Åæ„ÅôÔºâ",
      options: [
        "Êúà60ÂàÜ„Åæ„ÅßÁÑ°Êñô",
        "Êúà70ÂàÜ„Åæ„ÅßÁÑ°Êñô",
        "Êúà100ÂàÜ„Åæ„ÅßÁÑ°Êñô",
        "ÁÑ°Âà∂ÈôêÔºàÂÆåÂÖ®ÂÆöÈ°çÔºâ",
      ],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        Array.isArray(ans.callPlanType) &&
        ans.callPlanType.some((t) => t.includes("ÂêàË®àÈÄöË©±ÊôÇÈñì")),
    },
    {
      id: "hybridCallPreference",
      question:
        "Â∏åÊúõ„Åô„ÇãÂõûÊï∞ÔºãÊôÇÈñìÂà∂ÈôêÂûã„ÅÆÁØÑÂõ≤„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇÔºà‚ÄªÈÅ∏Êäû„Åó„Åü‰∏äÈôê„Çà„ÇäÂ∞ë„Å™„ÅÑ„Éó„É©„É≥„ÅØÊØîËºÉÂØæË±°Â§ñ„Å´„Å™„Çä„Åæ„ÅôÔºâ",
      options: [
        "Êúà30Âõû„Åæ„ÅßÂêÑ10ÂàÜÁÑ°ÊñôÔºà„Çà„Åè„ÅÇ„ÇãÂÆöÁï™„Çø„Ç§„ÉóÔºâ",
        "Êúà50Âõû„Åæ„ÅßÂêÑ10ÂàÜÁÑ°ÊñôÔºàÈÄöË©±ÂõûÊï∞„ÅåÂ§ö„ÅÑÊñπÂêë„ÅëÔºâ",
        "ÁÑ°Âà∂ÈôêÔºàÂõûÊï∞Âà∂Èôê„Å™„ÅóÔºâ",
      ],
      type: "radio" as const,
      condition: (ans: Phase2Answers) =>
        Array.isArray(ans.callPlanType) &&
        ans.callPlanType.some((t) => t.includes("ÂõûÊï∞„Åæ„Åß")),
    },

    // Êµ∑Â§ñÈÄöË©±„Åã„ÅëÊîæÈ°å
    {
      id: "needInternationalCallUnlimited",
      question: "Êµ∑Â§ñ„Å∏„ÅÆ„Åã„ÅëÊîæÈ°å„Ç™„Éó„Ç∑„Éß„É≥„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü",
      options: ["„ÅØ„ÅÑ", "„ÅÑ„ÅÑ„Åà"],
      type: "radio" as const,
    },
    {
      id: "internationalCallCarrier",
      question:
        "‚ö†Ô∏è ÁèæÂú®„ÄÅÊµ∑Â§ñÈÄöË©±„Åã„ÅëÊîæÈ°å„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Çã„ÅÆ„ÅØ‰ª•‰∏ã„ÅÆ„Ç≠„É£„É™„Ç¢„ÅÆ„Åø„Åß„Åô„ÄÇÂ∏åÊúõ„Åô„Çã„ÇÇ„ÅÆ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ\n\n‚Äª„Åì„Åì„ÅßÈÅ∏Êäû„Åó„Åü„Ç≠„É£„É™„Ç¢„ÅÆ„Åø„ÄÅ‰ª•Èôç„ÅÆ„Éó„É©„É≥ÊØîËºÉ„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ",
      options: [
        "Ê•ΩÂ§©„É¢„Éê„Ç§„É´ÔºàÂõΩÈöõÈÄöË©±„Åã„ÅëÊîæÈ°åÔºö¬•980/Êúà„Éª65„Ç´ÂõΩÂØæË±°Ôºâ",
        "auÔºàÂõΩÈöõÈÄöË©±ÂÆöÈ°çÔºöÊúà900ÂàÜ„Éª23„Ç´ÂõΩÂØæË±°Ôºâ",
      ],
      type: "checkbox" as const,
      condition: (ans: Phase2Answers) =>
        ans.needInternationalCallUnlimited === "„ÅØ„ÅÑ",
    },

    {
      id: "callOptionsNeeded",
      question: "ÁïôÂÆàÁï™ÈõªË©±„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü",
      options: ["„ÅØ„ÅÑÔºàÂøÖË¶ÅÔºâ", "„ÅÑ„ÅÑ„ÅàÔºà‰∏çË¶ÅÔºâ"],
      type: "radio" as const,
    },
  ];

  const handleChange = (id: keyof Phase2Answers, value: string | string[]) => {
    const updated: Partial<Phase2Answers> = {};

    if (Array.isArray(value)) {
      (updated as Record<string, unknown>)[id] = value as unknown;
      onChange(updated);
      return;
    }

    if (id === "callPlanType") {
      updated.callPlanType = Array.isArray(value) ? value : [value];
      const isEmptyArray = Array.isArray(value) && value.length === 0;
      if (isEmptyArray) {
        updated.timeLimitPreference = "";
        updated.monthlyLimitPreference = "";
        updated.hybridCallPreference = "";
      }
      onChange(updated);
      return;
    }

    (updated as Record<string, unknown>)[id] = value as unknown;

    if (id === "needCallPlan" && value === "„ÅÑ„ÅÑ„ÅàÔºà‰Ωø„Å£„ÅüÂàÜ„Å†„ÅëÊîØÊâï„ÅÑ„Åü„ÅÑÔºâ") {
      updated.callPlanType = [];
      updated.timeLimitPreference = "";
      updated.monthlyLimitPreference = "";
      updated.hybridCallPreference = "";
    }

    if (id === "needCallPlan" && value === "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ") {
      updated.unknownCallUsageDuration = "";
      updated.unknownCallFrequency = "";
      updated.needCallPlanConfirm = "";
    }

    onChange(updated);
  };

  const showAdvice =
    answers.needCallPlan === "„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑÔºà„Åä„Åô„Åô„ÇÅ„ÇíÁü•„Çä„Åü„ÅÑÔºâ" &&
    answers.unknownCallUsageDuration &&
    answers.unknownCallFrequency;

  const suggestion =
    showAdvice &&
    suggestCallPlan({
      callDuration: answers.unknownCallUsageDuration,
      callFrequencyPerWeek: answers.unknownCallFrequency,
    } as Phase2Answers);

  const toggleInternationalCarrier = (opt: string) => {
    const current = Array.isArray(answers.internationalCallCarrier)
      ? answers.internationalCallCarrier
      : [];
    const next = current.includes(opt)
      ? current.filter((o: string) => o !== opt)
      : [...current, opt];
    onChange({ internationalCallCarrier: next });
  };

  return (
    <div className="w-full py-6 space-y-6">
      <AnimatePresence>
        {questions.map((q) => {
          if (q.condition && !q.condition(answers)) return null;

          if (q.id === "unknownCallFrequency") {
            return (
              <motion.div
                key={q.id}
                initial={{ opacity: 0, y: -8 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -8 }}
                transition={{ duration: 0.25 }}
              >
                <QuestionCard
                  id={q.id}
                  question={q.question}
                  options={q.options}
                  type={q.type}
                  value={answers[q.id as keyof Phase2Answers]}
                  onChange={handleChange}
                  answers={answers}
                />

                {suggestion && (
                  <motion.div
                    key="call-advice"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.4 }}
                    className="bg-white shadow-sm border border-sky-200 rounded-2xl p-5 mt-6 text-sky-800 space-y-4"
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-sky-500 text-xl">üìû</span>
                      <h3 className="font-semibold text-sky-900">ÈÄöË©±„Éó„É©„É≥„Ç¢„Éâ„Éê„Ç§„Çπ</h3>
                    </div>

                    <ReactMarkdown
                      components={{
                        p: (props) => (
                          <p {...props} className="mb-2 leading-relaxed text-gray-800" />
                        ),
                        strong: (props) => (
                          <strong {...props} className="text-sky-900 font-semibold" />
                        ),
                        h3: (props) => (
                          <h3 {...props} className="text-lg font-bold text-sky-700 mt-3" />
                        ),
                      }}
                    >
                      {suggestion}
                    </ReactMarkdown>

                    <div className="border-t border-sky-100 my-2" />
                    <p className="text-sm text-sky-600">
                      „Åì„ÅÆ„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÂèÇËÄÉ„Å´„ÄÅ„Äå„Åã„ÅëÊîæÈ°å„ÇíÂà©Áî®„Åó„Åü„ÅÑ„Åß„Åô„ÅãÔºü„Äç„ÅÆÂõûÁ≠î„ÇíÂÜçÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                  </motion.div>
                )}
              </motion.div>
            );
          }

          // ÂõΩÈöõÈÄöË©±„Ç≠„É£„É™„Ç¢„Ç´„Éº„ÉâÔºö‰∏ä„ÅÆÁ©∫ÁôΩ„ÇíË©∞„ÇÅ„ÄÅÊ≥®ÊÑèÊñá„ÇíÂÜÖÊû†„ÅÆÂ§ñ„Å∏
          if (q.id === "internationalCallCarrier") {
            const selected = Array.isArray(answers.internationalCallCarrier)
              ? answers.internationalCallCarrier
              : [];

            return (
              <motion.div
                key={q.id}
                initial={{ opacity: 0, y: -8 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -8 }}
                transition={{ duration: 0.25 }}
              >
                <QuestionCard
                  id={q.id}
                  question=""
                  options={[]}
                  type="custom"
                  value={selected}
                  onChange={handleChange}
                  answers={answers}
                >
                  {/* ‰∏ä„ÅÆ‰ΩôÁôΩ„ÇíËªΩ„ÅèË©∞„ÇÅ„Çã */}
                  <div className="-mt-2">
                    <h3 className="text-sky-900 font-semibold text-base mb-2">
                      „Äå„ÅØ„ÅÑ„Äç„Å´Èñ¢„Åô„ÇãËøΩÂä†Ë≥™Âïè
                    </h3>

                    {/* ÈÅ∏ÊäûËÇ¢„ÅÆÂÜÖÊû† */}
                    <div className="rounded-2xl border border-sky-300 bg-sky-50 p-3 space-y-3">
                      <p className="text-sky-900 font-semibold text-center">
                        ‚ö†Ô∏è ÁèæÂú®„ÄÅÊµ∑Â§ñÈÄöË©±„Åã„ÅëÊîæÈ°å„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Çã„ÅÆ„ÅØ‰ª•‰∏ã„ÅÆ„Ç≠„É£„É™„Ç¢„ÅÆ„Åø„Åß„Åô„ÄÇÂ∏åÊúõ„Åô„Çã„ÇÇ„ÅÆ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ
                      </p>

                      <div className="grid grid-cols-1 gap-3 w-full">
                        {[
                          "Ê•ΩÂ§©„É¢„Éê„Ç§„É´ÔºàÂõΩÈöõÈÄöË©±„Åã„ÅëÊîæÈ°åÔºö¬•980/Êúà„Éª65„Ç´ÂõΩÂØæË±°Ôºâ",
                          "auÔºàÂõΩÈöõÈÄöË©±ÂÆöÈ°çÔºöÊúà900ÂàÜ„Éª23„Ç´ÂõΩÂØæË±°Ôºâ",
                        ].map((opt) => {
                          const checked = selected.includes(opt);
                          return (
                            <div
                              key={opt}
                              onClick={() => toggleInternationalCarrier(opt)}
                              className={`flex items-center w-full cursor-pointer h-14 px-4 rounded-xl border text-sm font-medium select-none transition-all duration-200 ${
                                checked
                                  ? "bg-gradient-to-r from-sky-400 to-sky-500 text-white shadow ring-1 ring-sky-600 border-sky-600"
                                  : "bg-white border-sky-500 text-sky-900 hover:border-sky-600 hover:shadow-sm"
                              }`}
                            >
                              {opt}
                            </div>
                          );
                        })}
                      </div>
                    </div>

                    {/* Ê≥®ÊÑèÊñáÔºöÂÜÖÊû†„ÅÆÂ§ñ„Å´Âá∫„Åó„ÄÅÂ∞ë„ÅóÂ∞è„Åï„Åè */}
                    <p className="mt-2 text-[0.8rem] text-pink-600">
                      ‚Äª„Åì„Åì„ÅßÈÅ∏Êäû„Åó„Åü„Ç≠„É£„É™„Ç¢„ÅÆ„Åø„ÄÅ‰ª•Èôç„ÅÆ„Éó„É©„É≥ÊØîËºÉ„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ
                    </p>
                  </div>
                </QuestionCard>
              </motion.div>
            );
          }

          return (
            <motion.div
              key={q.id}
              initial={{ opacity: 0, y: -8 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -8 }}
              transition={{ duration: 0.25 }}
            >
              <QuestionCard
                id={q.id}
                question={q.question}
                options={q.options}
                type={q.type}
                value={answers[q.id as keyof Phase2Answers]}
                onChange={handleChange}
                answers={answers}
              />
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
}

"use client";
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DiagnosisAnswers } from "@/types/types";

type Phase1Props = {
  answers: DiagnosisAnswers;
  setAnswers: React.Dispatch<React.SetStateAction<DiagnosisAnswers>>;
  onNext: () => void;
};

const Phase1: React.FC<Phase1Props> = ({ answers, setAnswers, onNext }) => {
  const questions = [
    {
      id: 1,
      title: "‚ë† „Éù„Ç§„É≥„ÉàÈÇÑÂÖÉ„ÉªÁµåÊ∏àÂúèÁâπÂÖ∏„ÅÆËÄÉÊÖÆ",
      text: "„Éù„Ç§„É≥„ÉàÈÇÑÂÖÉ„ÇÑÁµåÊ∏àÂúèÁâπÂÖ∏„ÇÇ‚ÄúÂÆüË≥™ÊñôÈáë‚Äù„Å´Âê´„ÇÅ„Å¶ËÄÉ„Åà„Åæ„Åô„ÅãÔºü",
      options: [
        "„ÅØ„ÅÑÔºà„Éù„Ç§„É≥„Éà„ÇÇÂê´„ÇÅ„Å¶ÊúÄÂÆâ„ÇíÁü•„Çä„Åü„ÅÑÔºâ",
        "„ÅÑ„ÅÑ„ÅàÔºàÁèæÈáëÊîØÂá∫„Å†„Åë„ÅßÊØî„Åπ„Åü„ÅÑÔºâ",
      ],
    },
    {
      id: 2,
      title: "‚ë° ÈÄö‰ø°ÂìÅË≥™„ÅÆÈáçË¶ñÂ∫¶",
      text: "ÈÄö‰ø°ÂìÅË≥™ÔºàÈÄüÂ∫¶„ÉªÂÆâÂÆöÊÄßÔºâ„ÅØ„Å©„ÅÆÁ®ãÂ∫¶ÈáçË¶ñ„Åó„Åæ„Åô„ÅãÔºü",
      options: [
        "„Å®„Å¶„ÇÇÈáçË¶ñ„Åô„ÇãÔºàÂ§ßÊâã„Ç≠„É£„É™„Ç¢Ê∞¥Ê∫ñ„ÅåÊúõ„Åæ„Åó„ÅÑÔºâ",
        "„ÅÇ„ÇãÁ®ãÂ∫¶ÈáçË¶ñ„Åô„ÇãÔºàÊ†ºÂÆâ„Åß„ÇÇÂÆâÂÆö„Åó„Å¶„ÅÑ„Çå„Å∞OKÔºâ",
        "„Åì„Å†„Çè„Çâ„Å™„ÅÑÔºà„Ç≥„Çπ„ÉàÊúÄÂÑ™ÂÖàÔºâ",
      ],
    },
    {
      id: 3,
      title: "‚ë¢ Â∏åÊúõ„Åô„Çã„Ç≠„É£„É™„Ç¢Á®ÆÂà•",
      text: "„Ç≠„É£„É™„Ç¢„ÅÆÁ®ÆÈ°û„Å´Â∏åÊúõ„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü",
      options: [
        "Â§ßÊâã„Ç≠„É£„É™„Ç¢Ôºà„Éâ„Ç≥„É¢ / au / „ÇΩ„Éï„Éà„Éê„É≥„ÇØ / Ê•ΩÂ§©Ôºâ",
        "„Çµ„Éñ„Éñ„É©„É≥„ÉâÔºàahamo / povo / LINEMO / UQ„Å™„Å©Ôºâ„ÇÇOK",
        "Ê†ºÂÆâSIMÔºàIIJ / mineo / NURO„Å™„Å©Ôºâ„ÇÇÂê´„ÇÅ„Å¶Ê§úË®é„Åó„Åü„ÅÑ",
      ],
    },
    {
      id: 4,
      title: "‚ë£ „Çµ„Éù„Éº„Éà‰ΩìÂà∂„ÅÆÂ∏åÊúõ",
      text: "Â•ëÁ¥Ñ„Éª„Çµ„Éù„Éº„Éà„ÅØ„Ç™„É≥„É©„Ç§„É≥ÂÆåÁµê„ÅßÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì„ÅãÔºü",
      options: ["„ÅØ„ÅÑÔºàÂ∫óËàó„Çµ„Éù„Éº„Éà„ÅØ‰∏çË¶ÅÔºâ", "„ÅÑ„ÅÑ„ÅàÔºàÂ∫óÈ†≠„Çµ„Éù„Éº„Éà„ÅåÂøÖË¶ÅÔºâ"],
    },
    {
      id: 5,
      title: "‚ë§ Â•ëÁ¥ÑÊúüÈñì„ÉªÁ∏õ„Çä„ÅÆË®±ÂÆπÂ∫¶",
      text: "Â•ëÁ¥ÑÊúüÈñì„ÅÆÁ∏õ„Çä„ÇÑËß£Á¥ÑÈáë„Å´„Å§„ÅÑ„Å¶„ÄÅ„Å©„ÅÆÁ®ãÂ∫¶Ê∞ó„Å´„Åó„Åæ„Åô„ÅãÔºü",
      options: [
        "Áµ∂ÂØæ„Å´Â´åÔºàÁ∏õ„Çä„Å™„Åó„ÅåÂâçÊèêÔºâ",
        "„Åß„Åç„Çå„Å∞ÈÅø„Åë„Åü„ÅÑ„ÅåÂÜÖÂÆπÊ¨°Á¨¨",
        "Ê∞ó„Å´„Åó„Å™„ÅÑÔºàÊù°‰ª∂Ê¨°Á¨¨„ÅßOKÔºâ",
      ],
    },
  ];

  const handleSelect = (id: number, option: string) => {
    setAnswers((prev) => ({
      ...prev,
      [id]: option,
    }));
  };

  return (
    <Card className="w-full max-w-xl bg-slate-800 text-white shadow-lg rounded-2xl">
      <CardContent className="p-6 space-y-6">
        <h2 className="text-2xl font-bold mb-4 text-center">
          üìç „Éï„Çß„Éº„Ç∫‚ë†ÔºöÂâçÊèêÊù°‰ª∂
        </h2>
        <div className="space-y-6">
          {questions.map((q) => (
            <div key={q.id} className="space-y-3">
              <h3 className="text-lg font-semibold text-blue-400">{q.title}</h3>
              <p className="text-sm text-gray-300">{q.text}</p>
              <div className="flex flex-col gap-2">
                {q.options.map((option, idx) => (
                  <Button
                    key={idx}
                    variant="outline"
                    className={`w-full max-w-[90%] mx-auto text-sm whitespace-normal rounded-lg px-4 py-3 transition
                      ${
                        answers[q.id] === option
                          ? "bg-blue-600 text-white border-blue-600"
                          : "bg-slate-700 text-gray-200 border-slate-600 hover:bg-slate-600"
                      }`}
                    onClick={() => handleSelect(q.id, option)}
                  >
                    {option}
                  </Button>
                ))}
              </div>
            </div>
          ))}
        </div>
        <div className="flex justify-end pt-4">
          <Button
            onClick={onNext}
            disabled={Object.keys(answers).length < questions.length}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg"
          >
            Ê¨°„Å∏ ‚Üí
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Phase1;
